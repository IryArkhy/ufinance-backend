// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  email        String        @unique
  username     String        @unique
  password     String
  role         ROLES         @default(BASIC)
  categories   Category[]
  accounts     Account[]
  payees       Payee[]
  tags         Tag[]
  transactions Transaction[]
  userBalance  UserBalance[]
}

model Account {
  id                 String               @id @default(auto()) @map("_id") @db.ObjectId
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  name               String               
  balance            Float                @default(0.00)
  currency           CURRENCY             @default(UAH)
  isCredit           Boolean              @default(false)
  icon               ACCOUNT_ICON         @default(BILL)
  userId             String               @db.ObjectId
  user               User                 @relation(fields: [userId], references: [id])
  fromAccount        Transaction[]        @relation("fromAccount")
  toAccount          Transaction[]        @relation("toAccount")
  balanceUpdateEvent BalanceUpdateEvent[]

  @@unique([userId, name], name: "AccountIdentifier")
}

model Category {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  type         CATEGORY_TYPE @default(CUSTOM)
  name         String
  user         User          @relation(fields: [userId], references: [id])
  userId       String        @db.ObjectId
  transactions Transaction[]

  @@unique([userId, name], name: "CategoryIdentifier")
}

model Payee {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  user         User          @relation(fields: [userId], references: [id])
  userId       String        @db.ObjectId
  transactions Transaction[]

  @@unique([userId, name], name: "PayeeIdentifier")
}

model Tag {
  id           String             @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  user         User               @relation(fields: [userId], references: [id])
  userId       String             @db.ObjectId
  transactions TagOnTransaction[]

  @@unique([userId, name], name: "TagIdentifier")
}

model Transaction {
  id              String             @id @default(auto()) @map("_id") @db.ObjectId
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  amount          Float              @default(0)
  toAccountAmount Float?             @default(0)
  description     String?
  date            DateTime
  category        Category?          @relation(fields: [categoryId], references: [id])
  payee           Payee?             @relation(fields: [payeeId], references: [id])
  user            User               @relation(fields: [userId], references: [id])
  type            TRANSACTION_TYPE   @default(WITHDRAWAL)
  tags            TagOnTransaction[]
  fromAccount     Account            @relation(fields: [fromAccountId], references: [id], name: "fromAccount")
  toAccount       Account?           @relation(fields: [toAccountId], references: [id], name: "toAccount")

  userId             String               @db.ObjectId
  fromAccountId      String               @db.ObjectId
  toAccountId        String?              @db.ObjectId
  categoryId         String?              @db.ObjectId
  payeeId            String?              @db.ObjectId
  balanceUpdateEvent BalanceUpdateEvent[]

  @@unique([fromAccountId, id], name: "TransactionIdentifier")
}

model TagOnTransaction {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  assignedAt  DateTime    @default(now())
  tag         Tag         @relation(fields: [tagId], references: [id])
  transaction Transaction @relation(fields: [transactionId], references: [id])

  tagId         String @db.ObjectId
  transactionId String @db.ObjectId

  @@unique([transactionId, tagId])
}

model UserBalance {
  id          String               @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  user        User                 @relation(fields: [userId], references: [id])
  month       Int
  year        Int
  currency    CURRENCY             @default(USD)
  balance     Float                @default(0.00)
  updateEvent BalanceUpdateEvent[]

  userId String @db.ObjectId

  @@unique([month, year, userId], name: "BalanceUpdateIdentifier")
}

model BalanceUpdateEvent {
  id             String                @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime              @default(now())
  reason         BALANCE_UPDATE_REASON
  totalBalance   Float
  transaction    Transaction?          @relation(fields: [transactionId], references: [id])
  account        Account?              @relation(fields: [accountId], references: [id])
  updateAmount   Float
  updateCurrency CURRENCY
  userBalance    UserBalance           @relation(fields: [userBalanceId], references: [id])

  transactionId String? @db.ObjectId
  accountId     String? @db.ObjectId
  userBalanceId String  @db.ObjectId
}

enum BALANCE_UPDATE_REASON {
  GET_BALANCE
  CREATE_ACCOUNT
  DELETE_ACCONT
  CREATE_TRANSACTION
  UPDATE_TRANSACTION
  REMOVE_TRANSACTION
}

enum ROLES {
  BASIC
  ADMIN
}

enum CURRENCY {
  UAH
  USD
  EUR
  BTC
  ETH
}

enum ACCOUNT_ICON {
  BANK
  CARD
  MONEY
  BILL
  SAVINGS
  WALLET
  USD
  EUR
  BTC
  PAYMENTS
  SHOPPING
  TRAVEL
}

enum CATEGORY_TYPE {
  DEFAULT
  CUSTOM
}

enum TRANSACTION_TYPE {
  WITHDRAWAL
  DEPOSIT
  TRANSFER
}
