// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String           @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime         @default(now())
  email        String           @unique
  username     String           @unique
  password     String
  role         ROLES            @default(BASIC)
  categories   CustomCategory[]
  accounts     Account[]
  payees       Payee[]
  tags         Tag[]
  transactions Transaction[]
  transfers    Transfer[]
}

model Account {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  name         String        @unique
  balance      Float         @default(0.00)
  currency     CURRENCY      @default(UAH)
  isCredit     Boolean       @default(false)
  icon         ACCOUNT_ICON  @default(BILL)
  createdAt    DateTime      @default(now())
  userId       String        @db.ObjectId
  user         User          @relation(fields: [userId], references: [id])
  transactions Transaction[]
  fromAccount  Transfer[]    @relation("fromAccount")
  toAccount    Transfer[]    @relation("toAccount")

  @@unique([userId, name], name: "AccountIdentifier")
}

model CustomCategory {
  id     String        @id @default(auto()) @map("_id") @db.ObjectId
  type   CATEGORY_TYPE @default(CUSTOM)
  name   String
  user   User          @relation(fields: [userId], references: [id])
  userId String        @db.ObjectId

  @@unique([userId, name], name: "CustomCategoryIdentifier")
}

model Category {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  type         CATEGORY_TYPE @default(DEFAULT)
  name         String
  transactions Transaction[]
}

model Payee {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  user         User          @relation(fields: [userId], references: [id])
  userId       String        @db.ObjectId
  transactions Transaction[]

  @@unique([userId, name], name: "PayeeIdentifier")
}

model Tag {
  id           String             @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  user         User               @relation(fields: [userId], references: [id])
  userId       String             @db.ObjectId
  transactions TagOnTransaction[]
  @@unique([userId, name], name: "TagIdentifier")
}

model Transaction {
  id          String             @id @default(auto()) @map("_id") @db.ObjectId
  amount      Float              @default(0)
  description String?
  date        DateTime
  category    Category?          @relation(fields: [categoryId], references: [id])
  payee       Payee?             @relation(fields: [payeeId], references: [id])
  account     Account            @relation(fields: [accountId], references: [id])
  user        User               @relation(fields: [userId], references: [id])
  type        TRANSACTION_TYPE   @default(WITHDRAWAL)
  tags        TagOnTransaction[]

  userId     String  @db.ObjectId
  accountId  String  @db.ObjectId
  categoryId String? @db.ObjectId
  payeeId    String? @db.ObjectId
}

model TagOnTransaction {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  transactionId String      @db.ObjectId
  tagId         String      @db.ObjectId
  assignedAt    DateTime    @default(now())
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  tag           Tag         @relation(fields: [tagId], references: [id])

  @@unique([transactionId, tagId])
}

model Transfer {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  amount      Float    @default(0)
  description String?
  date        DateTime
  fromAccount Account  @relation(fields: [transferFromAccountId], references: [id], name: "fromAccount")
  toAccount   Account  @relation(fields: [transferToAccountId], references: [id], name: "toAccount")
  user        User     @relation(fields: [userId], references: [id])

  userId                String @db.ObjectId
  transferFromAccountId String @db.ObjectId
  transferToAccountId   String @db.ObjectId
}

enum ROLES {
  BASIC
  ADMIN
}

enum CURRENCY {
  UAH
  USD
  EUR
  BTC
  ETH
}

enum ACCOUNT_ICON {
  BANK
  CARD
  MONEY
  BILL
  SAVINGS
  WALLET
  USD
  EUR
  BTC
  PAYMENTS
  SHOPPING
  TRAVEL
}

enum CATEGORY_TYPE {
  DEFAULT
  CUSTOM
}

enum TRANSACTION_TYPE {
  WITHDRAWAL
  DEPOSIT
}
